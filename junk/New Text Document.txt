UpdateMIDIPlayer: 	; UNTESTED
	; first check if this function should be doing anything at all
	mov r0, #(player_run)
	mov a, @r0 
	jnz playerIsRunning
	ret 	; exit if the player isn't running 
playerIsRunning:

	push ar0 
	push ar2
	push ar3
	push ar4
	push ar5 
	push ar6 
	push ar7

	; increment the isr counter and AND with bitmask
	mov r0, #(isr_counter)
	inc @r0
	mov a, @r0 
	anl a, #(TICK_DIVIDER)
	mov @r0, a 
	
	
	; see if we should skip this 
	jnz ISRCounter_skip
	; START MIDI PLAYER THINGS
	cpl P1.5
	; if event countdown is not zero, then dont run anything (still decrement it tho)
	
	; start check if event countdown is zero 
	mov r0, #(event_countdown)
	mov a, @r0
	mov r2, a 
	inc r0 
	mov a, @r0 
	orl a, r2 
	jnz eventCountdown_skip
	; end check if event countdown is zero
	
	;cpl P1.5
	
	; load note_pointer into DPTR
	mov r0, #(note_pointer)
	mov a, @r0 
	mov dpl, a 
	inc r0
	mov a, @r0 
	mov dph, a 
	
	; put data into registers
	mov a, #0
	movc a, @a+dptr
	mov r2, a 	; counter low 
	
	mov a, #1
	movc a, @a+dptr
	mov r3, a 	; counter high 
	
	mov a, #2
	movc a, @a+dptr
	mov r4, a 	; delay low 
	
	mov a, #3
	movc a, @a+dptr
	mov r5, a 	; delay high
	
	mov a, #4
	movc a, @a+dptr
	mov r6, a 	; metadata byte  
	mov r7, a 	; also metadata byte 
	; end put data into registers 
	
	; copy metadata into r6 and r7, but different parts 
	mov a, r6 
	anl a, #0x0F
	mov r6, a 	; r6 is the channel 
	
	mov a, r7 
	anl a, #0xF0
	mov r7, a 	; r7 is the command 
	
	; now have the branching parts 
	
	mov a, r7 	; this isnt needed but imma leave it here 
	jnz notNoteOff
	
	; here, run the note off command 
	mov a, r6 
	lcall NoteStop
	
	ljmp endConditionalsDJPA
notNoteOff:		
	; now see if it is note on, or data end 
	mov a, r7 	
	subb a, #0b00010000 ; subtract the note on command 
	jnz notNoteOn
	
	; here, run the note on command 
	; note that r2 and r3 already have the counter values loaded. If they didnt, then we must load them into r2 and r3.
	mov a, r6 	; load channel into a 
	lcall NoteStart
	ljmp endConditionalsDJPA
notNoteOn:
	; here, we stop the execution. 
	mov r0, #(player_run)
	mov @r0, #0
	
endConditionalsDJPA:
	
	; start increment note_pointer
	mov r0, #(note_pointer)
	mov a, @r0 
	add a, #5 
	mov @r0, a 
	inc r0 
	mov a, @r0 
	addc a, #0 
	mov @r0, a 
	; end increment note_pointer
	
	; start set event countdown
	mov r0, #(event_countdown)
	mov a, r4 
	mov @r0, a 
	inc r0 
	mov a, r5
	mov @r0, a 
	; end set event countdown
	
	; END MIDI PLAYER THINGS 
eventCountdown_skip:
	; start decrement event_countdown 
	mov r0, #(event_countdown)
	mov a, @r0
	clr c 
	subb a, #1
	mov @r0, a 
	
	inc r0 
	mov a, @r0 
	subb a, #0 
	mov @r0, a 
	; end decrement event countdown
	
ISRCounter_skip:
	pop ar7 
	pop ar6
	pop ar5 
	pop ar4
	pop ar3 
	pop ar2 
	pop ar0
	ret 
	
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; BELOW IS ENSHITTIFIED VERSION, ABOVE IS ORIGINAL

